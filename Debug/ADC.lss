
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c0  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Adc_Initialization>:
#include <avr/interrupt.h>


void Adc_Initialization(void)
{
	DDRA &=~((1U<<ADC0)|(1U<<ADC1)|(1U<<ADC2));								//make PORTA direction as input
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	88 7f       	andi	r24, 0xF8	; 248
  70:	8a bb       	out	0x1a, r24	; 26
	
	
	ADCSRA |=(1U<<ADPS0);													//select conversion time  ck/64 (8M/64) = 125 k
  72:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |=(1U<<ADPS1);													//select conversion time  ck/64 (8M/64) = 125 k
  74:	31 9a       	sbi	0x06, 1	; 6
	ADCSRA |=(1U<<ADPS2);													//select conversion time  ck/64 (8M/64) = 125 k
  76:	32 9a       	sbi	0x06, 2	; 6
	
	ADMUX |=(1U<<REFS0);													//reference voltage same as VCC (AVCC)
  78:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX &=~(1U<<REFS1);													//reference voltage same as VCC (AVCC)
  7a:	3f 98       	cbi	0x07, 7	; 7

	ADMUX &=~((1U<<MUX0)|(1U<<MUX1)|(1U<<MUX2)|(1U<<MUX3)|(1U<<MUX4));		//channel 0 (ADC0)
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 7e       	andi	r24, 0xE0	; 224
  80:	87 b9       	out	0x07, r24	; 7
	
	ADMUX &=~(1U<<ADLAR);													//right adjustment
  82:	3d 98       	cbi	0x07, 5	; 7
	
	ADCSRA |=(1U<<ADIE);													//enable ADC interrupt
  84:	33 9a       	sbi	0x06, 3	; 6
	
	sei();																	//enable global interrupts
  86:	78 94       	sei
	
	ADCSRA |=(1U<<ADEN);													// enable ADC module
  88:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |=(1U<<ADSC);													//start conversion
  8a:	36 9a       	sbi	0x06, 6	; 6
  8c:	08 95       	ret

0000008e <Adc_OutputValue>:
}

uint16_t Adc_OutputValue(void)
{
	while (ADCSRA&(1U<<ADIF)== 0);
  8e:	86 b1       	in	r24, 0x06	; 6
	uint16_t adc_reading=0;
	adc_reading = ADCL |(ADCH<<8);		//read the ADC value
  90:	84 b1       	in	r24, 0x04	; 4
  92:	25 b1       	in	r18, 0x05	; 5
  94:	90 e0       	ldi	r25, 0x00	; 0
	return adc_reading;
}
  96:	92 2b       	or	r25, r18
  98:	08 95       	ret

0000009a <main>:
#include "ADC-Driver.h"


int main(void)
{
	Adc_Initialization();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <Adc_Initialization>
	uint16_t readed_data=0;
	
	
    while (1) 
    {
		readed_data=Adc_OutputValue();	
  9e:	0e 94 47 00 	call	0x8e	; 0x8e <Adc_OutputValue>
    }
  a2:	fd cf       	rjmp	.-6      	; 0x9e <main+0x4>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
